I"
8<h3 id="springboot简介">SpringBoot简介</h3>
<p><a href="https://baike.baidu.com/item/Spring%20Boot/20249767?fr=aladdin">Spring Boot 百度百科</a></p>

<blockquote>
  <p>Spring Boot让我们的Spring应用变的更轻量化。比如：你可以仅仅依靠一个Java类来运行一个Spring引用。你也可以打包你的应用为jar并通过使用java-jar来运行你的Spring Web应用。</p>
</blockquote>

<p>Spring Boot的主要优点：</p>
<ol>
  <li>为所有Spring开发者更快的入门</li>
  <li>开箱即用，提供各种默认配置来简化项目配置</li>
  <li>内嵌式容器简化Web项目</li>
  <li>没有冗余代码生成和XML配置的要求</li>
</ol>

<h3 id="一系统要求">一、系统要求</h3>

<ol>
  <li>Java 7及以上</li>
  <li>Spring Framework 4.1.5及以上</li>
  <li>本文采用Java 1.8.0_73、Spring Boot 1.3.2调试通过。</li>
</ol>

<h3 id="二快速入门">二、快速入门</h3>
<h4 id="21-创建一个maven工程">2.1 创建一个Maven工程</h4>
<p>名为”springboot-helloworld” 类型为<font color="red">Jar</font>工程项目</p>

<h4 id="22-pom文件引入依赖">2.2 pom文件引入依赖</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> &lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
		&lt;version&gt;1.3.3.RELEASE&lt;/version&gt;
	&lt;/parent&gt;
	&lt;dependencies&gt;
	  &lt;!—SpringBoot web 组件 --&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
</code></pre></div></div>

<p><strong>spring-boot-starter-parent作用</strong><br />
在pom.xml中引入spring-boot-start-parent,它可以提供dependency management,也就是说依赖管理，引入以后在申明其它dependency的时候就不需要version了，后面可以看到。<br />
<strong>spring-boot-starter-web作用</strong><br />
springweb 核心组件<br />
<strong>spring-boot-maven-plugin作用</strong><br />
 如果我们要直接Main启动spring，那么以下plugin必须要添加，否则是无法启动的。如果使用maven 的spring-boot:run的话是不需要此配置的。（我在测试的时候，如果不配置下面的plugin也是直接在Main中运行的。）<br /></p>

<h4 id="23-编写helloworld服务">2.3 编写HelloWorld服务</h4>

<p>创建package命名为com.zxq.controller（根据实际情况修改)<br />
创建HelloController类，内容如下</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> @RestController
@EnableAutoConfiguration
public class HelloController {
	@RequestMapping("/hello")
	public String index() {
		return "Hello World";
	}	
public static void main(String[] args) {
		SpringApplication.run(HelloController.class, args);
	}
}
</code></pre></div></div>

<h4 id="24-restcontroller">2.4 @RestController</h4>
<p>在上加上RestController 表示修饰该Controller所有的方法返回JSON格式,直接可以编写
Restful接口</p>

<h4 id="25-enableautoconfiguration">2.5 @EnableAutoConfiguration</h4>
<p>注解:作用在于让 Spring Boot   根据应用所声明的依赖来对 Spring 框架进行自动配置<br />
这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。<br />
由于spring-boot-starter-web添加了Tomcat和Spring MVC，所以auto-configuration将假定你正在开发一个web应用并相应地对Spring进行设置。<br /></p>

<h4 id="26-springapplicationrunhellocontrollerclass-args">2.6 SpringApplication.run(HelloController.class, args);</h4>
<p>标识为启动类</p>

<h4 id="27-springboot启动方式1">2.7 SpringBoot启动方式1</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Springboot默认端口号为8080
@RestController
@EnableAutoConfiguration
public class HelloController {
	@RequestMapping("/hello")
	public String index() {
		return "Hello World";
}	
public static void main(String[] args) {
		SpringApplication.run(HelloController.class, args);
	}
}
</code></pre></div></div>

<p>启动主程序，打开浏览器访问http://localhost:8080/index，可以看到页面输出Hello World<br /></p>

<h4 id="28-springboot启动方式2">2.8 SpringBoot启动方式2</h4>

<p>@ComponentScan(basePackages = “com.zxq.controller”)—控制器扫包范围</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@ComponentScan(basePackages = "com.itmayiedu.controller")
@EnableAutoConfiguration
public class App {
	public static void main(String[] args) {
		SpringApplication.run(App.class, args);
	}
}
</code></pre></div></div>

<h3 id="三web开发">三、Web开发</h3>
<h4 id="31静态资源访问">3.1、静态资源访问</h4>
<p>在我们开发Web应用的时候，需要引用大量的js、css、图片等静态资源。<br />
默认配置<br />
Spring Boot默认提供静态资源目录位置需置于classpath下，目录名需符合如下规则：<br />
/static<br />
/public<br />
/resources<br />
/META-INF/resources<br />
举例：我们可以在src/main/resources/目录下创建static，在该位置放置一个图片文件。启<br />动程序后，尝试访问http://localhost:8080/D.jpg。如能显示图片，配置成功。<br /></p>

<h4 id="32全局捕获异常">3.2、全局捕获异常</h4>
<p>@ExceptionHandler 表示拦截异常<br />
@ControllerAdvice 是 controller 的一个辅助类，最常用的就是作为全局异常处理的切面类<br />
@ControllerAdvice 可以指定扫描范围<br />
@ControllerAdvice 约定了几种可行的返回值，如果是直接返回 model 类的话，需要使用<br /> @ResponseBody 进行 json 转换<br />
返回 String，表示跳到某个 view<br />
返回 modelAndView<br />
返回 model + @ResponseBody<br /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@ControllerAdvice
public class GlobalExceptionHandler {
	@ExceptionHandler(RuntimeException.class)
	@ResponseBody
	public Map&lt;String, Object&gt; exceptionHandler() {
		Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();
		map.put("errorCode", "101");
		map.put("errorMsg", "系統错误!");
		return map;
	}
}
</code></pre></div></div>

<h4 id="33渲染web页面">3.3、渲染Web页面</h4>

<p>渲染Web页面<br />
在之前的示例中，我们都是通过@RestController来处理请求，所以返回的内容为json对象。那么如果需要渲染html页面的时候，要如何实现呢？<br />
模板引擎<br />
在动态HTML实现上Spring Boot依然可以完美胜任，并且提供了多种模板引擎的默认配置支持，所以在推荐的模板引擎下，我们可以很快的上手开发动态网站。<br />
Spring Boot提供了默认配置的模板引擎主要有以下几种：<br /></p>

<ul>
  <li>Thymeleaf</li>
  <li>FreeMarker</li>
  <li>Velocity</li>
  <li>Groovy</li>
  <li>Mustache</li>
</ul>

<blockquote>
  <p>Spring Boot建议使用这些模板引擎，避免使用JSP，若一定要使用JSP将无法实现Spring
Boot的多种特性，具体可见后文：支持JSP的配置
当你使用上述模板引擎中的任何一个，它们默认的模板配置路径为：src/main/resources/templates。当然也可以修改这个路径，具体如何修改，可在后续各模板引擎的配置属性中查询并修改。</p>
</blockquote>

<h4 id="34使用freemarker模板引擎渲染web视图">3.4、使用Freemarker模板引擎渲染web视图</h4>
<h5 id="341pom文件引入">3.4.1、pom文件引入：</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!-- 引入freeMarker的依赖包. --&gt;
&lt;dependency&gt;
&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
&lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<h5 id="342后台代码">3.4.2、后台代码</h5>
<p>在src/main/resources/创建一个templates文件夹,后缀为*.ftl<br /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@RequestMapping("/index")
	public String index(Map&lt;String, Object&gt; map) {
	    map.put("name","美丽的天使...");
		return "index";
	}
</code></pre></div></div>

<h5 id="341前台代码">3.4.1、前台代码</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
	  ${name}
<span class="nt">&lt;/body&gt;</span> 
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h5 id="344freemarker其他用法">3.4.4、Freemarker其他用法</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@RequestMapping("/index")
	public String index(Map<span class="nt">&lt;String</span><span class="err">,</span> <span class="na">Object</span><span class="nt">&gt;</span> map) {
	    map.put("name","###zxq###");
	    map.put("sex",1);
  List<span class="nt">&lt;String&gt;</span> userlist=new ArrayList<span class="nt">&lt;String&gt;</span>();
	    userlist.add("zxq");
	    userlist.add("张三");
	    userlist.add("李四");
	    map.put("userlist",userlist);
	    return "index";
	}
	
    	
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;title&gt;</span>首页<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
	  ${name}
	  <span class="nt">&lt;</span><span class="na">#if</span> <span class="na">sex=</span><span class="s">=1</span><span class="nt">&gt;</span>
            男
      <span class="nt">&lt;</span><span class="na">#elseif</span> <span class="na">sex=</span><span class="s">=2</span><span class="nt">&gt;</span>
            女
     <span class="nt">&lt;</span><span class="na">#else</span><span class="nt">&gt;</span>
        其他      
	  
	  <span class="nt">&lt;/</span><span class="err">#</span><span class="nt">if&gt;</span>
	  
	 <span class="nt">&lt;</span><span class="na">#list</span> <span class="na">userlist</span> <span class="na">as</span> <span class="na">user</span><span class="nt">&gt;</span>
	   ${user}
	 <span class="nt">&lt;/</span><span class="err">#</span><span class="nt">list&gt;</span>
<span class="nt">&lt;/body&gt;</span> 
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h5 id="345freemarker配置">3.4.5、Freemarker配置</h5>

<p>新建application.properties文件<br /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>########################################################
###FREEMARKER (FreeMarkerAutoConfiguration)
########################################################
spring.freemarker.allow-request-override=false
spring.freemarker.cache=true
spring.freemarker.check-template-location=true
spring.freemarker.charset=UTF-8
spring.freemarker.content-type=text/html
spring.freemarker.expose-request-attributes=false
spring.freemarker.expose-session-attributes=false
spring.freemarker.expose-spring-macro-helpers=false
#spring.freemarker.prefix=
#spring.freemarker.request-context-attribute=
#spring.freemarker.settings.*=
spring.freemarker.suffix=.ftl
spring.freemarker.template-loader-path=classpath:/templates/
#comma-separated list
#spring.freemarker.view-names= # whitelist of view names that can be resolved
</code></pre></div></div>

<h4 id="35使用jsp渲染web视图">3.5、使用JSP渲染Web视图</h4>

<h5 id="351pom文件引入以下依赖">3.5.1、pom文件引入以下依赖</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
		&lt;version&gt;1.3.3.RELEASE&lt;/version&gt;
	&lt;/parent&gt;
	&lt;dependencies&gt;
		&lt;!-- SpringBoot 核心组件 --&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;
			&lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
</code></pre></div></div>

<h5 id="352在applicationproperties创建以下配置">3.5.2、在application.properties创建以下配置</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp
</code></pre></div></div>

<h5 id="353后台代码">3.5.3、后台代码</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Controller
public class IndexController {
	@RequestMapping("/index")
	public String index() {
		return "index";
	}
}
</code></pre></div></div>

<h3 id="巴拉巴拉">巴拉巴拉</h3>
<p>单身狗又穷又没颜<br />
多敲代码多看报<br />
恩，剁完手更有力气敲代码了，天啊撸<br />
没控制自己，又看了一本课外书(专业书能不能看看啦？？？？？)，余华的《第七天》，第一次阅读余华的书，总听别人推荐《活着》，以后一定拜读。喜欢上这个作者了，通透哲思。<br />
推荐歌曲《小蓝》，恩~没单曲循环多久大概五六天吧，这首歌的故事送给你，剩下的感悟自己揣着~~~<br /></p>

:ET