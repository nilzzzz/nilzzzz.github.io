I" <h3 id="什么是kafka">什么是kafka？</h3>
<p>LinkedIn开源<br /></p>

<ul>
  <li>分布式数据同步系统Databus</li>
  <li>高性能计算引擎Cubert</li>
  <li>Java异步处理框架ParSeq</li>
  <li>Kafka流处理平台</li>
</ul>

<p>Apache<br /></p>

<h3 id="kafka流处理平台">Kafka流处理平台</h3>

<ul>
  <li>LinkedIn开发</li>
  <li>2011年初开源，加入Apache基金会</li>
  <li>2012年从Apache Incubator毕业</li>
  <li>Apache顶级开源项目</li>
</ul>

<p><strong>streaming platform has three key capabilities；</strong></p>

<ul>
  <li>publish and subscribe to streams of records,similar to a message queue or enterprise messaging system.</li>
  <li>store streams of records in a fault-torlerant durable way.</li>
  <li>process streams of records as they occur.</li>
</ul>

<p><strong>Kafka is generally used for two broad classes of applications:</strong></p>

<ul>
  <li>building real-time streaming data pipelines that reliably get data between systems or applications</li>
  <li>building real-time streaming applications that transform or react to the streams of data</li>
</ul>

<h3 id="kafka基本概念">Kafka基本概念</h3>

<ul>
  <li>producer：消息和数据的生产者，向Kafka的一个topic发布消息的进程/代码/服务</li>
  <li>consumer：消息和数据的消费者，订阅数据（Topic）并且处理其发布的消息的进程/代码/服务</li>
  <li>consumer group：逻辑概念，对于同一个topic，会广播给不同的group，一个group中，只有一个consumer可以消费该消息</li>
  <li>broker：物理概念，kafka集群中的每个kafka节点</li>
  <li>topic：逻辑概念，kafka消息的类别，对数据进行区分、隔离</li>
  <li>partition：物理概念，kafka下数据存储的基本单元。一个topic数据，会被分散存储到多个partition，每一个partition是有序的</li>
  <li>replication：同一个partition可能会有多个replica，多个replica之间数据是一样的</li>
  <li>replication leader：一个partition的多个replica上，需要一个leader负责该partition上与producer和consumer交互</li>
  <li>replicaManager：负责管理当前broker所有分区和副本的信息，处理kafkacontroller发起的一些请求，副本状态的切换、添加/读取信息等</li>
</ul>

<h3 id="partition">partition</h3>

<ul>
  <li>每一个topic被切分成多个partitions</li>
  <li>消费者数目少于或等于partition的数目</li>
  <li>broker group中的每一个broker保存topic的一个或多个partitions</li>
  <li>consumer group中的仅有一个consumer读取topic的一个或多个partitions 并且是唯一的consumer</li>
</ul>

<h3 id="replication">replication</h3>

<ul>
  <li>当集群中有broker挂掉的情况，系统可以主动地使replicas提供服务</li>
  <li>系统默认设置每一个topic的replication系数为1，可以在创建topic时单独设置</li>
</ul>

<p>replication特点:</p>
<ul>
  <li>replication的基本单位是topic的partition</li>
  <li>所有的读和写都从leader进，followers只是作为备份</li>
  <li>follower必须能够及时复制leader的数据</li>
  <li>增加容错性与可扩展性</li>
</ul>

<h3 id="kafka基本结构">kafka基本结构</h3>
<p><img src="https://blog-1258233124.cos.ap-beijing.myqcloud.com/kafka%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt="此处输入图片的描述" /></p>

<ul>
  <li>producer api</li>
  <li>consumer api</li>
  <li>streams api</li>
  <li>connectors api <br />
<img src="https://blog-1258233124.cos.ap-beijing.myqcloud.com/kafka%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%841.png" alt="此处输入图片的描述" /></li>
</ul>

<h3 id="kafka特点">kafka特点</h3>
<p><strong>分布式</strong></p>
<ul>
  <li>多分区</li>
  <li>多副本</li>
  <li>多订阅者</li>
  <li>基于ZooKeeper调度
<strong>高性能</strong></li>
  <li>高吞吐量</li>
  <li>低延迟</li>
  <li>高并发</li>
  <li>时间复杂度O（1）
<strong>持久性与扩展性</strong></li>
  <li>数据可持久化</li>
  <li>容错性</li>
  <li>支持在线水平扩展</li>
  <li>消息自动平衡</li>
</ul>

<h3 id="kafka应用场景">kafka应用场景</h3>

<blockquote>
  <p>消息队列 
行为跟踪<br /> 
元信息监控 <br /> 
日志收集 <br /> 
流处理 <br /> 
事件源<br /> 
持久性日志（commit log）</p>
</blockquote>

:ET